/*
 * OnfonMediaSMSGatewayLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package ke.co.onfonmedia.api.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;

import ke.co.onfonmedia.api.*;
import ke.co.onfonmedia.api.models.*;
import ke.co.onfonmedia.api.exceptions.*;
import ke.co.onfonmedia.api.http.client.HttpClient;
import ke.co.onfonmedia.api.http.client.HttpContext;
import ke.co.onfonmedia.api.http.request.HttpRequest;
import ke.co.onfonmedia.api.http.response.HttpResponse;
import ke.co.onfonmedia.api.http.response.HttpStringResponse;
import ke.co.onfonmedia.api.http.client.APICallBack;
import ke.co.onfonmedia.api.controllers.syncwrapper.APICallBackCatcher;

public class TemplateController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static TemplateController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the TemplateController class 
     */
    public static TemplateController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new TemplateController();
                }
            }
        }
        return instance;
    }

    /**
     * Get Template List
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse getTemplateList(
    ) throws Throwable {

        HttpRequest _request = _buildGetTemplateListRequest();
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetTemplateListResponse(_context);
    }

    /**
     * Get Template List
     */
    public void getTemplateListAsync(
                final APICallBack<DynamicResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetTemplateListRequest();
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            DynamicResponse returnValue = _handleGetTemplateListResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getTemplateList
     */
    private HttpRequest _buildGetTemplateListRequest() throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/Template");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("ApiKey", Configuration.apiKey);
        _queryParameters.put("ClientId", Configuration.clientId);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("AccessKey", Configuration.accessKey);

        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getTemplateList
     * @return An object of type DynamicResponse
     */
    private DynamicResponse _handleGetTemplateListResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        DynamicResponse _result = new DynamicResponse(_response);

        return _result;
    }

    /**
     * Create New Template
     * @param    messageTemplate    Required parameter: Template text.
     * @param    templateName    Required parameter: Name of template
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse createNewTemplate(
                final String messageTemplate,
                final String templateName
    ) throws Throwable {

        HttpRequest _request = _buildCreateNewTemplateRequest(messageTemplate, templateName);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateNewTemplateResponse(_context);
    }

    /**
     * Create New Template
     * @param    messageTemplate    Required parameter: Template text.
     * @param    templateName    Required parameter: Name of template
     */
    public void createNewTemplateAsync(
                final String messageTemplate,
                final String templateName,
                final APICallBack<DynamicResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateNewTemplateRequest(messageTemplate, templateName);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            DynamicResponse returnValue = _handleCreateNewTemplateResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createNewTemplate
     */
    private HttpRequest _buildCreateNewTemplateRequest(
                final String messageTemplate,
                final String templateName) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/Template");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("ApiKey", Configuration.apiKey);
        _queryParameters.put("ClientId", Configuration.clientId);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("AccessKey", Configuration.accessKey);

        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //load all fields for the outgoing API request
        Map<String, Object> _parameters = new HashMap<String, Object>();
        _parameters.put("MessageTemplate", messageTemplate);
        _parameters.put("TemplateName", templateName);

        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createNewTemplate
     * @return An object of type DynamicResponse
     */
    private DynamicResponse _handleCreateNewTemplateResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        DynamicResponse _result = new DynamicResponse(_response);

        return _result;
    }

    /**
     * Update Template
     * @param    messageTemplate    Required parameter: Template text.
     * @param    templateName    Required parameter: Name of template
     * @param    id    Required parameter: id of template
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse updateTemplate(
                final String messageTemplate,
                final String templateName,
                final int id
    ) throws Throwable {

        HttpRequest _request = _buildUpdateTemplateRequest(messageTemplate, templateName, id);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdateTemplateResponse(_context);
    }

    /**
     * Update Template
     * @param    messageTemplate    Required parameter: Template text.
     * @param    templateName    Required parameter: Name of template
     * @param    id    Required parameter: id of template
     */
    public void updateTemplateAsync(
                final String messageTemplate,
                final String templateName,
                final int id,
                final APICallBack<DynamicResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateTemplateRequest(messageTemplate, templateName, id);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            DynamicResponse returnValue = _handleUpdateTemplateResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updateTemplate
     */
    private HttpRequest _buildUpdateTemplateRequest(
                final String messageTemplate,
                final String templateName,
                final int id) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/Template");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("ApiKey", Configuration.apiKey);
        _queryParameters.put("ClientId", Configuration.clientId);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("AccessKey", Configuration.accessKey);

        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //load all fields for the outgoing API request
        Map<String, Object> _parameters = new HashMap<String, Object>();
        _parameters.put("MessageTemplate", messageTemplate);
        _parameters.put("TemplateName", templateName);
        _parameters.put("id", id);

        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().put(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updateTemplate
     * @return An object of type DynamicResponse
     */
    private DynamicResponse _handleUpdateTemplateResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        DynamicResponse _result = new DynamicResponse(_response);

        return _result;
    }

    /**
     * Delete Template
     * @param    id    Required parameter: id of template
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse deleteTemplate(
                final int id
    ) throws Throwable {

        HttpRequest _request = _buildDeleteTemplateRequest(id);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleDeleteTemplateResponse(_context);
    }

    /**
     * Delete Template
     * @param    id    Required parameter: id of template
     */
    public void deleteTemplateAsync(
                final int id,
                final APICallBack<DynamicResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildDeleteTemplateRequest(id);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            DynamicResponse returnValue = _handleDeleteTemplateResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for deleteTemplate
     */
    private HttpRequest _buildDeleteTemplateRequest(
                final int id) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/Template");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("ApiKey", Configuration.apiKey);
        _queryParameters.put("ClientId", Configuration.clientId);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("AccessKey", Configuration.accessKey);

        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //load all fields for the outgoing API request
        Map<String, Object> _parameters = new HashMap<String, Object>();
        _parameters.put("id", id);

        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for deleteTemplate
     * @return An object of type DynamicResponse
     */
    private DynamicResponse _handleDeleteTemplateResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        DynamicResponse _result = new DynamicResponse(_response);

        return _result;
    }

}
