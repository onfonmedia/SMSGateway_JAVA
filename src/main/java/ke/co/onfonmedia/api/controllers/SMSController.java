/*
 * OnfonMediaSMSGatewayLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package ke.co.onfonmedia.api.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import org.joda.time.LocalDate;

import ke.co.onfonmedia.api.*;
import ke.co.onfonmedia.api.models.*;
import ke.co.onfonmedia.api.exceptions.*;
import ke.co.onfonmedia.api.http.client.HttpClient;
import ke.co.onfonmedia.api.http.client.HttpContext;
import ke.co.onfonmedia.api.http.request.HttpRequest;
import ke.co.onfonmedia.api.http.response.HttpResponse;
import ke.co.onfonmedia.api.http.response.HttpStringResponse;
import ke.co.onfonmedia.api.http.client.APICallBack;
import ke.co.onfonmedia.api.controllers.syncwrapper.APICallBackCatcher;

public class SMSController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static SMSController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the SMSController class 
     */
    public static SMSController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new SMSController();
                }
            }
        }
        return instance;
    }

    /**
     * Get Sent Message List
     * @param    enddate    Required parameter: Date format must be in yyyy-mm-dd
     * @param    fromdate    Required parameter: Date format must be in yyyy-mm-dd
     * @param    length    Required parameter: Ending index value to fetch the campaign detail.
     * @param    start    Required parameter: Starting index value to fetch the campaign detail.
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse getSentMessageList(
                final LocalDate enddate,
                final LocalDate fromdate,
                final int length,
                final int start
    ) throws Throwable {

        HttpRequest _request = _buildGetSentMessageListRequest(enddate, fromdate, length, start);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetSentMessageListResponse(_context);
    }

    /**
     * Get Sent Message List
     * @param    enddate    Required parameter: Date format must be in yyyy-mm-dd
     * @param    fromdate    Required parameter: Date format must be in yyyy-mm-dd
     * @param    length    Required parameter: Ending index value to fetch the campaign detail.
     * @param    start    Required parameter: Starting index value to fetch the campaign detail.
     */
    public void getSentMessageListAsync(
                final LocalDate enddate,
                final LocalDate fromdate,
                final int length,
                final int start,
                final APICallBack<DynamicResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetSentMessageListRequest(enddate, fromdate, length, start);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            DynamicResponse returnValue = _handleGetSentMessageListResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getSentMessageList
     */
    private HttpRequest _buildGetSentMessageListRequest(
                final LocalDate enddate,
                final LocalDate fromdate,
                final int length,
                final int start) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/SMS");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("enddate", DateTimeHelper.toSimpleDate(enddate));
        _queryParameters.put("fromdate", DateTimeHelper.toSimpleDate(fromdate));
        _queryParameters.put("length", length);
        _queryParameters.put("start", start);
        _queryParameters.put("ApiKey", Configuration.apiKey);
        _queryParameters.put("ClientId", Configuration.clientId);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("AccessKey", Configuration.accessKey);

        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getSentMessageList
     * @return An object of type DynamicResponse
     */
    private DynamicResponse _handleGetSentMessageListResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        DynamicResponse _result = new DynamicResponse(_response);

        return _result;
    }

    /**
     * Get Sent Message Status
     * @param    messageId    Required parameter: MessageId of message
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse getSentMessageStatus(
                final int messageId
    ) throws Throwable {

        HttpRequest _request = _buildGetSentMessageStatusRequest(messageId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetSentMessageStatusResponse(_context);
    }

    /**
     * Get Sent Message Status
     * @param    messageId    Required parameter: MessageId of message
     */
    public void getSentMessageStatusAsync(
                final int messageId,
                final APICallBack<DynamicResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetSentMessageStatusRequest(messageId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            DynamicResponse returnValue = _handleGetSentMessageStatusResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getSentMessageStatus
     */
    private HttpRequest _buildGetSentMessageStatusRequest(
                final int messageId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/MessageStatus");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("MessageId", messageId);
        _queryParameters.put("ApiKey", Configuration.apiKey);
        _queryParameters.put("ClientId", Configuration.clientId);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("AccessKey", Configuration.accessKey);

        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getSentMessageStatus
     * @return An object of type DynamicResponse
     */
    private DynamicResponse _handleGetSentMessageStatusResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        DynamicResponse _result = new DynamicResponse(_response);

        return _result;
    }

    /**
     * Create SMS
     * @param    message    Required parameter: text message to send
     * @param    mobileNumber    Required parameter: Use mobile number as comma sepreated to send message on multiple mobile number e.g. 78461230,78945612
     * @param    senderId    Required parameter: Approved Sender Id
     * @param    coRelator    Optional parameter: Parameter required for using SDP OnDemand Service
     * @param    isFlash    Optional parameter: Is_Flash is true or false for flash message
     * @param    isUnicode    Optional parameter: Is_Unicode is true or false for unicode message
     * @param    linkId    Optional parameter: Parameter required for using SDP OnDemand Service
     * @param    groupId    Optional parameter: Valid group-id of current user (only for group message otherwise leave empty string)
     * @param    scheduleTime    Optional parameter: scheduleTime Date in yyyy-MM-dd HH:MM (only for schedule message)
     * @param    serviceId    Optional parameter: Parameter required for using SDP OnSubscription Service
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse getCreateSMS(
                final String message,
                final String mobileNumber,
                final String senderId,
                final String coRelator,
                final Boolean isFlash,
                final Boolean isUnicode,
                final String linkId,
                final String groupId,
                final String scheduleTime,
                final String serviceId
    ) throws Throwable {

        HttpRequest _request = _buildGetCreateSMSRequest(message, mobileNumber, senderId, coRelator, isFlash, isUnicode, linkId, groupId, scheduleTime, serviceId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetCreateSMSResponse(_context);
    }

    /**
     * Create SMS
     * @param    message    Required parameter: text message to send
     * @param    mobileNumber    Required parameter: Use mobile number as comma sepreated to send message on multiple mobile number e.g. 78461230,78945612
     * @param    senderId    Required parameter: Approved Sender Id
     * @param    coRelator    Optional parameter: Parameter required for using SDP OnDemand Service
     * @param    isFlash    Optional parameter: Is_Flash is true or false for flash message
     * @param    isUnicode    Optional parameter: Is_Unicode is true or false for unicode message
     * @param    linkId    Optional parameter: Parameter required for using SDP OnDemand Service
     * @param    groupId    Optional parameter: Valid group-id of current user (only for group message otherwise leave empty string)
     * @param    scheduleTime    Optional parameter: scheduleTime Date in yyyy-MM-dd HH:MM (only for schedule message)
     * @param    serviceId    Optional parameter: Parameter required for using SDP OnSubscription Service
     */
    public void getCreateSMSAsync(
                final String message,
                final String mobileNumber,
                final String senderId,
                final String coRelator,
                final Boolean isFlash,
                final Boolean isUnicode,
                final String linkId,
                final String groupId,
                final String scheduleTime,
                final String serviceId,
                final APICallBack<DynamicResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetCreateSMSRequest(message, mobileNumber, senderId, coRelator, isFlash, isUnicode, linkId, groupId, scheduleTime, serviceId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            DynamicResponse returnValue = _handleGetCreateSMSResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getCreateSMS
     */
    private HttpRequest _buildGetCreateSMSRequest(
                final String message,
                final String mobileNumber,
                final String senderId,
                final String coRelator,
                final Boolean isFlash,
                final Boolean isUnicode,
                final String linkId,
                final String groupId,
                final String scheduleTime,
                final String serviceId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/SendSMS");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("Message", message);
        _queryParameters.put("MobileNumber", mobileNumber);
        _queryParameters.put("SenderId", senderId);
        if (coRelator != null) {
            _queryParameters.put("CoRelator", coRelator);
        }
        if (isFlash != null) {
            _queryParameters.put("Is_Flash", isFlash);
        }
        if (isUnicode != null) {
            _queryParameters.put("Is_Unicode", isUnicode);
        }
        if (linkId != null) {
            _queryParameters.put("LinkId", linkId);
        }
        if (groupId != null) {
            _queryParameters.put("groupId", groupId);
        }
        if (scheduleTime != null) {
            _queryParameters.put("scheduleTime", scheduleTime);
        }
        if (serviceId != null) {
            _queryParameters.put("serviceId", serviceId);
        }
        _queryParameters.put("ApiKey", Configuration.apiKey);
        _queryParameters.put("ClientId", Configuration.clientId);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("AccessKey", Configuration.accessKey);

        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getCreateSMS
     * @return An object of type DynamicResponse
     */
    private DynamicResponse _handleGetCreateSMSResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        DynamicResponse _result = new DynamicResponse(_response);

        return _result;
    }

    /**
     * Create SMS
     * @param    message    Required parameter: text message to send
     * @param    mobileNumber    Required parameter: Use mobile number as comma sepreated to send message on multiple mobile number e.g. 78461230,78945612
     * @param    senderId    Required parameter: Approved Sender Id
     * @param    coRelator    Optional parameter: Parameter required for using SDP OnDemand Service
     * @param    isFlash    Optional parameter: Is_Flash is true or false for flash message
     * @param    isUnicode    Optional parameter: Is_Unicode is true or false for unicode message
     * @param    linkId    Optional parameter: Parameter required for using SDP OnDemand Service
     * @param    groupId    Optional parameter: Valid group-id of current user (only for group message otherwise leave empty string)
     * @param    scheduleTime    Optional parameter: scheduleTime Date in yyyy-MM-dd HH:MM (only for schedule message)
     * @param    serviceId    Optional parameter: Parameter required for using SDP OnSubscription Service
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse createSMS(
                final String message,
                final String mobileNumber,
                final String senderId,
                final String coRelator,
                final Boolean isFlash,
                final Boolean isUnicode,
                final String linkId,
                final String groupId,
                final String scheduleTime,
                final String serviceId
    ) throws Throwable {

        HttpRequest _request = _buildCreateSMSRequest(message, mobileNumber, senderId, coRelator, isFlash, isUnicode, linkId, groupId, scheduleTime, serviceId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateSMSResponse(_context);
    }

    /**
     * Create SMS
     * @param    message    Required parameter: text message to send
     * @param    mobileNumber    Required parameter: Use mobile number as comma sepreated to send message on multiple mobile number e.g. 78461230,78945612
     * @param    senderId    Required parameter: Approved Sender Id
     * @param    coRelator    Optional parameter: Parameter required for using SDP OnDemand Service
     * @param    isFlash    Optional parameter: Is_Flash is true or false for flash message
     * @param    isUnicode    Optional parameter: Is_Unicode is true or false for unicode message
     * @param    linkId    Optional parameter: Parameter required for using SDP OnDemand Service
     * @param    groupId    Optional parameter: Valid group-id of current user (only for group message otherwise leave empty string)
     * @param    scheduleTime    Optional parameter: scheduleTime Date in yyyy-MM-dd HH:MM (only for schedule message)
     * @param    serviceId    Optional parameter: Parameter required for using SDP OnSubscription Service
     */
    public void createSMSAsync(
                final String message,
                final String mobileNumber,
                final String senderId,
                final String coRelator,
                final Boolean isFlash,
                final Boolean isUnicode,
                final String linkId,
                final String groupId,
                final String scheduleTime,
                final String serviceId,
                final APICallBack<DynamicResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateSMSRequest(message, mobileNumber, senderId, coRelator, isFlash, isUnicode, linkId, groupId, scheduleTime, serviceId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            DynamicResponse returnValue = _handleCreateSMSResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createSMS
     */
    private HttpRequest _buildCreateSMSRequest(
                final String message,
                final String mobileNumber,
                final String senderId,
                final String coRelator,
                final Boolean isFlash,
                final Boolean isUnicode,
                final String linkId,
                final String groupId,
                final String scheduleTime,
                final String serviceId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/SendSMS");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("Message", message);
        _templateParameters.put("MobileNumber", mobileNumber);
        _templateParameters.put("SenderId", senderId);
        if (coRelator != null) {
            _templateParameters.put("CoRelator", coRelator);
        }
        if (isFlash != null) {
            _templateParameters.put("Is_Flash", isFlash);
        }
        if (isUnicode != null) {
            _templateParameters.put("Is_Unicode", isUnicode);
        }
        if (linkId != null) {
            _templateParameters.put("LinkId", linkId);
        }
        if (groupId != null) {
            _templateParameters.put("groupId", groupId);
        }
        if (scheduleTime != null) {
            _templateParameters.put("scheduleTime", scheduleTime);
        }
        if (serviceId != null) {
            _templateParameters.put("serviceId", serviceId);
        }
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("ApiKey", Configuration.apiKey);
        _queryParameters.put("ClientId", Configuration.clientId);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("AccessKey", Configuration.accessKey);

        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().post(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createSMS
     * @return An object of type DynamicResponse
     */
    private DynamicResponse _handleCreateSMSResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        DynamicResponse _result = new DynamicResponse(_response);

        return _result;
    }

    /**
     * Create Bulk SMS
     * @param    mobileNumberMessage    Required parameter: Please ensure while submitting the request the message should be passed in encoded format. e.g. 78461230^test~78945612^hello
     * @param    senderId    Required parameter: Approved Sender Id
     * @param    coRelator    Optional parameter: Parameter required for using SDP OnDemand Service
     * @param    isFlash    Optional parameter: Is_Flash is true or false for flash message
     * @param    isUnicode    Optional parameter: Is_Unicode is true or false for unicode message
     * @param    linkId    Optional parameter: Parameter required for using SDP OnDemand Service
     * @param    scheduleTime    Optional parameter: scheduleTime Date in yyyy-MM-dd HH:MM (only for schedule message)
     * @param    serviceId    Optional parameter: Parameter required for using SDP OnSubscription Service
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse getCreateBulkSMS(
                final String mobileNumberMessage,
                final String senderId,
                final String coRelator,
                final Boolean isFlash,
                final Boolean isUnicode,
                final String linkId,
                final LocalDate scheduleTime,
                final String serviceId
    ) throws Throwable {

        HttpRequest _request = _buildGetCreateBulkSMSRequest(mobileNumberMessage, senderId, coRelator, isFlash, isUnicode, linkId, scheduleTime, serviceId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetCreateBulkSMSResponse(_context);
    }

    /**
     * Create Bulk SMS
     * @param    mobileNumberMessage    Required parameter: Please ensure while submitting the request the message should be passed in encoded format. e.g. 78461230^test~78945612^hello
     * @param    senderId    Required parameter: Approved Sender Id
     * @param    coRelator    Optional parameter: Parameter required for using SDP OnDemand Service
     * @param    isFlash    Optional parameter: Is_Flash is true or false for flash message
     * @param    isUnicode    Optional parameter: Is_Unicode is true or false for unicode message
     * @param    linkId    Optional parameter: Parameter required for using SDP OnDemand Service
     * @param    scheduleTime    Optional parameter: scheduleTime Date in yyyy-MM-dd HH:MM (only for schedule message)
     * @param    serviceId    Optional parameter: Parameter required for using SDP OnSubscription Service
     */
    public void getCreateBulkSMSAsync(
                final String mobileNumberMessage,
                final String senderId,
                final String coRelator,
                final Boolean isFlash,
                final Boolean isUnicode,
                final String linkId,
                final LocalDate scheduleTime,
                final String serviceId,
                final APICallBack<DynamicResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetCreateBulkSMSRequest(mobileNumberMessage, senderId, coRelator, isFlash, isUnicode, linkId, scheduleTime, serviceId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            DynamicResponse returnValue = _handleGetCreateBulkSMSResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getCreateBulkSMS
     */
    private HttpRequest _buildGetCreateBulkSMSRequest(
                final String mobileNumberMessage,
                final String senderId,
                final String coRelator,
                final Boolean isFlash,
                final Boolean isUnicode,
                final String linkId,
                final LocalDate scheduleTime,
                final String serviceId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/SendBulkSMS");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("MobileNumber_Message", mobileNumberMessage);
        _queryParameters.put("SenderId", senderId);
        if (coRelator != null) {
            _queryParameters.put("CoRelator", coRelator);
        }
        if (isFlash != null) {
            _queryParameters.put("Is_Flash", isFlash);
        }
        if (isUnicode != null) {
            _queryParameters.put("Is_Unicode", isUnicode);
        }
        if (linkId != null) {
            _queryParameters.put("LinkId", linkId);
        }
        if (scheduleTime != null) {
            _queryParameters.put("scheduleTime", DateTimeHelper.toSimpleDate(scheduleTime));
        }
        if (serviceId != null) {
            _queryParameters.put("serviceId", serviceId);
        }
        _queryParameters.put("ApiKey", Configuration.apiKey);
        _queryParameters.put("ClientId", Configuration.clientId);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("AccessKey", Configuration.accessKey);

        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getCreateBulkSMS
     * @return An object of type DynamicResponse
     */
    private DynamicResponse _handleGetCreateBulkSMSResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        DynamicResponse _result = new DynamicResponse(_response);

        return _result;
    }

    /**
     * Create Bulk SMS
     * @param    messageParameters    Required parameter: Example: 
     * @param    senderId    Required parameter: Approved Sender Id
     * @param    isFlash    Optional parameter: Is_Flash is true or false for flash message
     * @param    isUnicode    Optional parameter: Is_Unicode is true or false for unicode message
     * @param    scheduleDateTime    Optional parameter: scheduleTime Date in yyyy-MM-dd HH:MM (only for schedule message)
     * @return    Returns the DynamicResponse response from the API call 
     */
    public DynamicResponse createBulkSMS(
                final List<String> messageParameters,
                final String senderId,
                final Boolean isFlash,
                final Boolean isUnicode,
                final LocalDate scheduleDateTime
    ) throws Throwable {

        HttpRequest _request = _buildCreateBulkSMSRequest(messageParameters, senderId, isFlash, isUnicode, scheduleDateTime);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateBulkSMSResponse(_context);
    }

    /**
     * Create Bulk SMS
     * @param    messageParameters    Required parameter: Example: 
     * @param    senderId    Required parameter: Approved Sender Id
     * @param    isFlash    Optional parameter: Is_Flash is true or false for flash message
     * @param    isUnicode    Optional parameter: Is_Unicode is true or false for unicode message
     * @param    scheduleDateTime    Optional parameter: scheduleTime Date in yyyy-MM-dd HH:MM (only for schedule message)
     */
    public void createBulkSMSAsync(
                final List<String> messageParameters,
                final String senderId,
                final Boolean isFlash,
                final Boolean isUnicode,
                final LocalDate scheduleDateTime,
                final APICallBack<DynamicResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateBulkSMSRequest(messageParameters, senderId, isFlash, isUnicode, scheduleDateTime);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            DynamicResponse returnValue = _handleCreateBulkSMSResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createBulkSMS
     */
    private HttpRequest _buildCreateBulkSMSRequest(
                final List<String> messageParameters,
                final String senderId,
                final Boolean isFlash,
                final Boolean isUnicode,
                final LocalDate scheduleDateTime) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/SendBulkSMS");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("MessageParameters", messageParameters);
        if (scheduleDateTime != null) {
            _templateParameters.put("ScheduleDateTime", DateTimeHelper.toSimpleDate(scheduleDateTime));
        }
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("SenderId", senderId);
        if (isFlash != null) {
            _queryParameters.put("Is_Flash", isFlash);
        }
        if (isUnicode != null) {
            _queryParameters.put("Is_Unicode", isUnicode);
        }
        _queryParameters.put("ApiKey", Configuration.apiKey);
        _queryParameters.put("ClientId", Configuration.clientId);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("AccessKey", Configuration.accessKey);

        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().post(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createBulkSMS
     * @return An object of type DynamicResponse
     */
    private DynamicResponse _handleCreateBulkSMSResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        DynamicResponse _result = new DynamicResponse(_response);

        return _result;
    }

}
